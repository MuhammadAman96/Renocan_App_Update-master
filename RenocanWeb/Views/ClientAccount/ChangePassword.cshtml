

@model RenocanWeb.Models.ChangePasswordModel

@{
    ViewBag.Title = "client change Password ";
}
<style type="text/css">

    .forgotPass .short {
        font-weight: bold;
        color: #FF0000;
        font-size: larger;
    }

    .forgotPass .weak {
        font-weight: bold;
        color: orange;
        font-size: larger;
    }

    .forgotPass .good {
        font-weight: bold;
        color: #2D98F3;
        font-size: larger;
    }

    .forgotPass .strong {
        font-weight: bold;
        color: limegreen;
        font-size: larger;
    }
</style>

<<div class="wrapper">
    <section class="sectionFlow forgotPass">
        <div class="overlay"></div>
        <div id="signing">
            <div class="content">
                <form method="post">

                    @Html.AntiForgeryToken()
                    <div id="divMessage" class="red-text">
                        <div class="alert-success">@Model.SuccessMessage</div>

                    </div>
   
                <p>Enter your new password, then click Change Password.</p>

                <fieldset>
                    <label for=""> Old Password</label>

                    @Html.PasswordFor(m => m.CurrentPassword, new { id = "txtoldPassword", placeholder = "Old password" })
                    <span id="result"></span>
                    @Html.ValidationMessageFor(m => m.CurrentPassword, "", new { @class = "text-red" })
                </fieldset>

                <fieldset>
                    <label for=""> New Password</label>

                    @Html.PasswordFor(m => m.NewPassword, new { id = "txtPassword", placeholder = "Enter new password" })
                    <span id="result"></span>
                    @Html.ValidationMessageFor(m => m.NewPassword, "", new { @class = "text-red" })
                </fieldset>

                <fieldset>
                    <label for=""> Confirm Password</label>

                    @Html.PasswordFor(m => m.ConfirmPassword, new { id = "txtConfirmPassword", placeholder = "Enter confirm password" })
                    @Html.ValidationMessageFor(m => m.ConfirmPassword, "", new { @class = "text-red" })
                </fieldset>
                <input id="btnRecoverAccount" type="submit" name="RecoverAccount" class="btnsub" value="Change Password">



                </form>
            </div>
        </div>
    </section>
</div>


<script type="text/javascript">
    $(document).ready(function () {

        $('[id*=btnRecoverAccount]').click(function () {
            return ValidateForm();
        });

        $('[id*=txtoldPassword]').keyup(function () {
            $('#result').html(checkStrength($('[id*=txtoldPassword]').val()));
        });

        $('[id*=txtPassword]').keyup(function () {
            $('#result').html(checkStrength($('[id*=txtPassword]').val()));
        });


    });

    function ValidateForm() {
        var iserror = false;
        var password = $('[id*=txtPassword]');
        var confirmPassword = $('[id*=txtConfirmPassword]');

        $('[id*=divMessage]').html('');
        password.removeClass('error');
        confirmPassword.removeClass('error');

        if (password.val().trim() == '' || typeof password.val() == "undefined") {
            password.addClass('error');
            iserror = true;
        }
        if (confirmPassword.val().trim() == '' || typeof confirmPassword.val() == "undefined") {
            confirmPassword.addClass('error');
            iserror = true;
        }
        if (!iserror && password.val().length < 6) {
            $('[id*=divMessage]').html("Password is too short.");
            iserror = true;
        }
        else if (!iserror && password.val().length > 20) {
            $('[id*=divMessage]').html("Password is too long.");
            iserror = true;
        }
        else if (!iserror && password.val().trim() != confirmPassword.val().trim()) {
            $('[id*=divMessage]').html("Password doesn't match.");
            iserror = true;
        }

        return !iserror;
    }
    function checkStrength(password) {
        var strength = 0
        if (password.length < 5) {
            $('#result').removeClass()
            $('#result').addClass('short')
            return 'Too short'
        }
        if (password.length > 7) strength += 1
        // If password contains both lower and uppercase characters, increase strength value.
        if (password.match(/([a-z].*[A-Z])|([A-Z].*[a-z])/)) strength += 1
        // If it has numbers and characters, increase strength value.
        if (password.match(/([a-zA-Z])/) && password.match(/([0-9])/)) strength += 1
        // If it has one special character, increase strength value.
        if (password.match(/([!,%,&,@@,#,$,^,*,?,_,~])/)) strength += 1
        // If it has two special characters, increase strength value.
        if (password.match(/(.*[!,%,&,@@,#,$,^,*,?,_,~].*[!,%,&,@@,#,$,^,*,?,_,~])/)) strength += 1
        // Calculated strength value, we can return messages
        // If value is less than 2
        if (strength < 2) {
            $('#result').removeClass()
            $('#result').addClass('weak')
            return 'Weak'
        } else if (strength == 2) {
            $('#result').removeClass()
            $('#result').addClass('good')
            return 'Good'
        } else {
            $('#result').removeClass()
            $('#result').addClass('strong')
            return 'Strong'
        }
    }
</script>
